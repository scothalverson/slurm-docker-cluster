services:
  mysql:
    image: mariadb:10.11
    hostname: mysql
    container_name: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_DATABASE: slurm_acct_db
      MYSQL_USER: slurm
      MYSQL_PASSWORD: password
    volumes:
      - var_lib_mysql:/var/lib/mysql
    networks:
      - slurm-network

  slurmdbd: 
    build: &slurm_base
      args:
        SLURM_TAG: slurm-21-08-6-1
      dockerfile_inline: |
        FROM nvcr.io/nvidia/nvhpc:25.5-devel-cuda12.9-rockylinux9

        LABEL org.opencontainers.image.source="https://github.com/giovtorres/slurm-docker-cluster" \
              org.opencontainers.image.title="slurm-docker-cluster" \
              org.opencontainers.image.description="Slurm Docker cluster on Rocky Linux 9" \
              org.label-schema.docker.cmd="docker-compose up -d" \
              maintainer="Giovanni Torres"

        RUN set -ex \
            && yum makecache \
            && yum -y update \
            && yum -y install dnf-plugins-core \
            #&& yum config-manager --set-enabled powertools \
            && yum config-manager --enable crb \
            && yum -y install \
               wget \
               bzip2 \
               perl \
               gcc \
               gcc-c++\
               git \
               gnupg \
               make \
               munge \
               munge-devel \
               python3-devel \
               python3-pip \
               python3 \
               mariadb-server \
               mariadb-devel \
               psmisc \
               bash-completion \
               vim-enhanced \
               http-parser-devel \
               json-c-devel \
            && yum clean all \
            && rm -rf /var/cache/yum

        #RUN alternatives --set python /usr/bin/python3

        RUN pip3 install Cython pytest

        ARG GOSU_VERSION=1.17

        RUN set -ex \
            && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.17/gosu-amd64" \
            && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/1.17/gosu-amd64.asc" \
            && export GNUPGHOME="$(mktemp -d)" \
            && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
            && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
            && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
            && chmod +x /usr/local/bin/gosu \
            && gosu nobody true

        ARG SLURM_TAG

        RUN set -x \
            && git clone -b slurm-21-08-6-1 --single-branch --depth=1 https://github.com/SchedMD/slurm.git \
            && pushd slurm \
            && ./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
                --with-mysql_config=/usr/bin  --libdir=/usr/lib64 \
            && make -j install \
            && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
            && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
            && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
            && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
            && popd \
            && rm -rf slurm \
            && groupadd -r --gid=990 slurm \
            && useradd -r -g slurm --uid=990 slurm \
            && mkdir /etc/sysconfig/slurm \
                /var/spool/slurmd \
                /var/run/slurmd \
                /var/run/slurmdbd \
                /var/lib/slurmd \
                /var/log/slurm \
                /data \
            && touch /var/lib/slurmd/node_state \
                /var/lib/slurmd/front_end_state \
                /var/lib/slurmd/job_state \
                /var/lib/slurmd/resv_state \
                /var/lib/slurmd/trigger_state \
                /var/lib/slurmd/assoc_mgr_state \
                /var/lib/slurmd/assoc_usage \
                /var/lib/slurmd/qos_usage \
                /var/lib/slurmd/fed_mgr_state \
            && chown -R slurm:slurm /var/*/slurm* \
            && /sbin/create-munge-key \
            && chown -R root:root /etc/munge/ \
            && chown 0:0 /etc/munge/munge.key \
            && chown -R root:root /var/log/munge \
            && chown -R root:root /var/lib/munge \
            && chmod 600 /etc/munge/munge.key \
            && chown -R root:root /run/munge

        RUN gosu root chown -R 0:0 /etc/munge/

        #create slurm.conf
        cat > /etc/slurm/slurm.conf <<EOF
        ClusterName=linux
        ControlMachine=slurmctld
        ControlAddr=slurmctld
        SlurmUser=slurm
        SlurmctldPort=6817
        SlurmdPort=6818
        AuthType=auth/munge
        StateSaveLocation=/var/lib/slurmd
        SlurmdSpoolDir=/var/spool/slurmd
        SwitchType=switch/none
        MpiDefault=none
        SlurmctldPidFile=/var/run/slurmd/slurmctld.pid
        SlurmdPidFile=/var/run/slurmd/slurmd.pid
        ProctrackType=proctrack/linuxproc
        ReturnToService=0
        SlurmctldTimeout=300
        SlurmdTimeout=300
        InactiveLimit=0
        MinJobAge=300
        KillWait=30
        Waittime=0
        SchedulerType=sched/backfill
        SelectType=select/cons_res
        SelectTypeParameters=CR_CPU_Memory
        FastSchedule=1
        SlurmctldDebug=3
        SlurmctldLogFile=/var/log/slurm/slurmctld.log
        SlurmdDebug=3
        SlurmdLogFile=/var/log/slurm/slurmd.log
        JobCompType=jobcomp/filetxt
        JobCompLoc=/var/log/slurm/jobcomp.log
        JobAcctGatherType=jobacct_gather/linux
        JobAcctGatherFrequency=30
        AccountingStorageType=accounting_storage/slurmdbd
        AccountingStorageHost=slurmdbd
        AccountingStoragePort=6819
        NodeName=c[1-2] RealMemory=1000 State=UNKNOWN
        PartitionName=normal Default=yes Nodes=c[1-2] Priority=50 DefMemPerCPU=500 Shared=NO MaxNodes=2 MaxTime=5-00:00:00 DefaultTime=5-00:00:00 State=UP
        EOF



        #create slurmdbd.conf
        cat > /etc/slurm/slurmdbd.conf <<EOF
        AuthType=auth/munge
        DbdAddr=slurmdbd
        DbdHost=slurmdbd
        SlurmUser=slurm
        DebugLevel=4
        LogFile=/var/log/slurm/slurmdbd.log
        PidFile=/var/run/slurmdbd/slurmdbd.pid
        StorageType=accounting_storage/mysql
        StorageHost=mysql
        StorageUser=slurm
        StoragePass=password
        EOF

        RUN set -x \
            && chown slurm:slurm /etc/slurm/slurmdbd.conf \
            && chmod 600 /etc/slurm/slurmdbd.conf


        #create entrypoint script
        cat > /usr/local/bin/docker-entrypoint.sh <<EOF
        #!/bin/bash
        set -e
        if [ "$1" = "slurmdbd" ]
        then
            echo "---> Starting the MUNGE Authentication service (munged) ..."
            gosu root /usr/sbin/munged
            echo "---> Starting the Slurm Database Daemon (slurmdbd) ..."
            {
                . /etc/slurm/slurmdbd.conf
                until echo "SELECT 1" | mysql -h $StorageHost -u$StorageUser -p$StoragePass 2>&1 > /dev/null
                do
                    echo "-- Waiting for database to become active ..."
                    sleep 2
                done
            }
            echo "-- Database is now active ..."
            exec gosu slurm /usr/sbin/slurmdbd -Dvvv
        fi
        if [ "$1" = "slurmctld" ]
        then
            echo "---> Starting the MUNGE Authentication service (munged) ..."
            gosu root /usr/sbin/munged
            echo "---> Waiting for slurmdbd to become active before starting slurmctld ..."
            until 2>/dev/null >/dev/tcp/slurmdbd/6819
            do
                echo "-- slurmdbd is not available.  Sleeping ..."
                sleep 2
            done
            echo "-- slurmdbd is now active ..."
            echo "---> Starting the Slurm Controller Daemon (slurmctld) ..."
            if /usr/sbin/slurmctld -V | grep -q '17.02' ; then
                exec gosu slurm /usr/sbin/slurmctld -Dvvv
            else
                exec gosu slurm /usr/sbin/slurmctld -i -Dvvv
            fi
        fi
        if [ "$1" = "slurmd" ]
        then
            echo "---> Starting the MUNGE Authentication service (munged) ..."
            gosu root /usr/sbin/munged
            echo "---> Waiting for slurmctld to become active before starting slurmd..."
            until 2>/dev/null >/dev/tcp/slurmctld/6817
            do
                echo "-- slurmctld is not available.  Sleeping ..."
                sleep 2
            done
            echo "-- slurmctld is now active ..."

            echo "---> Starting the Slurm Node Daemon (slurmd) ..."
            exec /usr/sbin/slurmd -Dvvv
        fi
        exec "$@"
        EOF
        ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
    command: ["slurmdbd"]
    container_name: slurmdbd
    hostname: slurmdbd
    volumes:
      - etc_munge:/etc/munge
      - etc_slurm:/etc/slurm
      - var_log_slurm:/var/log/slurm
    expose:
      - "6819"
    depends_on:
      - mysql
    networks:
      - slurm-network

  slurmctld:
    build:
      <<: *slurm_base
    command: ["slurmctld"]
    container_name: slurmctld
    hostname: slurmctld
    volumes:
      - etc_munge:/etc/munge
      - etc_slurm:/etc/slurm
      - ./slurm_jobdir:/data
      - var_log_slurm:/var/log/slurm
    expose:
      - "6817"
    depends_on:
      - "slurmdbd"
    networks:
      - slurm-network

  c1: &node_base
    build:
      <<: *slurm_base
    command: ["slurmd"]
    hostname: c1
    container_name: c1
    volumes:
      - etc_munge:/etc/munge
      - etc_slurm:/etc/slurm
      - ./slurm_jobdir:/data
      - var_log_slurm:/var/log/slurm
    expose:
      - "6818"
    depends_on:
      - "slurmctld"
    networks:
      - slurm-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]

  c2:
    <<: *node_base
    hostname: c2
    container_name: c2
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]

volumes:
  etc_munge:
  etc_slurm:
  var_lib_mysql:
  var_log_slurm:

networks:
  slurm-network:
    driver: bridge
